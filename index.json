{"repository_name":"concur","body":"![GitHub release](https://img.shields.io/github/release/lbarasti/concur.svg)\n![Build Status](https://github.com/lbarasti/concur/workflows/spec_and_docs/badge.svg)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://lbarasti.github.io/concur)\n\n# concur\n\nA collection of primitives for event-driven programming.\n\n## Installation\n\nAdd the dependency to your `shard.yml` and run `shards install`:\n\n  ```yaml\n  dependencies:\n    concur:\n      github: lbarasti/concur\n  ```\n\n## Usage\n\n```crystal\nrequire \"concur\"\n```\n\n### Using Future\nYou can use `Future` to wrap asynchronous computations that might fail.\n```crystal\nf = Future.new {\n  sleep 2 # a placeholder for some expensive computation or for a lengthy IO operation\n  \"Success!\"\n}\n\nf.await # => \"Success!\"\n```\nIf you want to keep on manipulating the result of a future in a separate fiber, then you can rely on `Future`'s instance methods.\n\nFor example, given a future `f`, you can apply a function to the wrapped value with `#map`, filter it with `#select` and recover from failure with `#recover`\n\n```crystal\nf.map { |v| v.downcase }\n  .select { |v| v.size < 3 }\n  .recover { \"default_key\" }\n```\n\nHere is a contrived example to showcase some other common methods.\n\nYou can combine the result of two Futures into one with `#zip`:\n\n```crystal\nauthor_f : Future(User) = db.user_by_id(1)\nreviewer_f : Future(User) = db.user_by_id(2)\n\npermission_f : Future(Bool) = author_f.zip(reviewer_f) { |author, reviewer|\n  author.has_reviewer?(reviewer) \n}\n```\n\nYou can use `#flat_map` to avoid nesting futures:\n\n```crystal\ncontent_f : Future(Content) = permission_f\n  .flat_map { |reviewer_is_allowed|\n    if reviewer_is_allowed\n      db.content_by_user(1) # => Future(Content)\n    else\n      raise NotAllowedError.new\n    end\n  }\n```\n\nAnd perform side effects with `#on_success` and `#on_error`.\n\n```crystal\ncontent_f\n  .on_success { |content|\n    reviewer_f.await!.email(content)\n  }\n  .on_error { |ex| log_error(ex) }\n```\n\nCheck out the [API docs](https://lbarasti.com/concur/) for more details.\n\n## Development\n\nRun `shards install` to install the project dependencies. You can then run `crystal spec` to verify that all the tests are passing.\n\n## Contributing\n\n1. Fork it (<https://github.com/lbarasti/concur/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [lbarasti](https://github.com/lbarasti) - creator and maintainer\n","program":{"html_id":"concur/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"concur","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"concur/Channel","path":"Channel.html","kind":"class","full_name":"Channel(T)","name":"Channel","abstract":false,"superclass":{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concur/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concur.cr","line_number":61,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L61"}],"repository_name":"concur","program":false,"enum":false,"alias":false,"const":false,"doc":"A `Channel` enables concurrent communication between fibers.\n\nThey allow communicating data between fibers without sharing memory and without having to worry about locks, semaphores or other special structures.\n\n```\nchannel = Channel(Int32).new\n\nspawn do\n  channel.send(0)\n  channel.send(1)\nend\n\nchannel.receive # => 0\nchannel.receive # => 1\n```\n\nNOTE: Although a `Channel(Nil)` or any other nilable types like `Channel(Int32?)` are valid\nthey are discouraged since from certain methods or constructs it receiving a `nil` as data\nwill be indistinguishable from a closed channel.\n","summary":"<p>A <code><a href=\"Channel.html\">Channel</a></code> enables concurrent communication between fibers.</p>","instance_methods":[{"html_id":"batch(size:Int32,interval:Time::Span,name=nil):Channel(Enumerable(T))-instance-method","name":"batch","doc":"Sends batches of messages either every `size` messages received or every `interval`,\nif a batch has not been sent within the last `interval`.","summary":"<p>Sends batches of messages either every <code>size</code> messages received or every <code>interval</code>, if a batch has not been sent within the last <code>interval</code>.</p>","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int32"},{"name":"interval","external_name":"interval","restriction":"Time::Span"},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(size : Int32, interval : Time::Span, name = nil) : Channel(Enumerable(T))","args_html":"(size : Int32, interval : Time::Span, name = <span class=\"n\">nil</span>) : <a href=\"Channel.html\">Channel</a>(Enumerable(T))","location":{"filename":"src/concur.cr","line_number":194,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L194"},"def":{"name":"batch","args":[{"name":"size","external_name":"size","restriction":"Int32"},{"name":"interval","external_name":"interval","restriction":"Time::Span"},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"return_type":"Channel(Enumerable(T))","visibility":"Public","body":"Channel(Enumerable(T)).new.tap do |out_stream|\n  memory = Array(T).new(size)\n  tick = every(interval) do\n    nil\n  end\n  sent = false\n  spawn(name: name) do\n    begin\n      loop do\n        select\nwhen v = self.receive\n          memory << v\n          if memory.size >= size\n            out_stream.send(memory.dup)\n            memory.clear\n            sent = true\n          end\nwhen tick.receive\n          if sent\n          else\n            out_stream.send(memory.dup)\n            memory.clear\n          end\n          sent = false\nend\n\n      end\n    rescue Channel::ClosedError\n      out_stream.send(memory.dup)\n      out_stream.close\n    end\n  end\nend"}},{"html_id":"broadcast(out_ports=2,name=nil)-instance-method","name":"broadcast","doc":"TODO define a macro to return a Tuple","summary":"<p><span class=\"flag orange\">TODO</span>  define a macro to return a Tuple</p>","abstract":false,"args":[{"name":"out_ports","default_value":"2","external_name":"out_ports","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(out_ports = 2, name = nil)","args_html":"(out_ports = <span class=\"n\">2</span>, name = <span class=\"n\">nil</span>)","location":{"filename":"src/concur.cr","line_number":152,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L152"},"def":{"name":"broadcast","args":[{"name":"out_ports","default_value":"2","external_name":"out_ports","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"visibility":"Public","body":"out_ports.times.map do\n  Channel(T).new\nend.to_a.tap do |streams|\n  spawn(name: name) do\n    self.listen do |v|\n      streams.each(&.send(v))\n    end\n    streams.each(&.close())\n  end\nend"}},{"html_id":"each(name=nil,&block:T->)-instance-method","name":"each","abstract":false,"args":[{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = nil, &block : T -> )","args_html":"(name = <span class=\"n\">nil</span>, &block : T -> )","location":{"filename":"src/concur.cr","line_number":234,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L234"},"def":{"name":"each","args":[{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T ->)"},"visibility":"Public","body":"spawn(name: name) do\n  loop do\n    begin\n      block.call(self.receive)\n    rescue Channel::ClosedError\n      break\n    end\n  end\nend"}},{"html_id":"listen(&block:T->)-instance-method","name":"listen","abstract":false,"location":{"filename":"src/concur.cr","line_number":225,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L225"},"def":{"name":"listen","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T ->)"},"visibility":"Public","body":"loop do\n  begin\n    block.call(self.receive)\n  rescue Channel::ClosedError\n    puts(\"#{Fiber.current.name} rescuing\")\n    break\n  end\nend"}},{"html_id":"map(initial_state:S,buffer_size=0,name=nil,&block:S,T->V)forallS,V-instance-method","name":"map","abstract":false,"args":[{"name":"initial_state","external_name":"initial_state","restriction":"S"},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(initial_state : S, buffer_size = 0, name = nil, &block : S, T -> V) forall S, V","args_html":"(initial_state : S, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : S, T -> V) forall S, V","location":{"filename":"src/concur.cr","line_number":115,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L115"},"def":{"name":"map","args":[{"name":"initial_state","external_name":"initial_state","restriction":"S"},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"yields":2,"block_arg":{"name":"block","external_name":"block","restriction":"(S, T -> V)"},"visibility":"Public","body":"state = initial_state\nself.map(name: name, buffer_size: buffer_size) do |t|\n  state, v = block.call(state, t)\n  v\nend\n"}},{"html_id":"map(workers=1,buffer_size=0,name=nil,&block:T->V):Channel(V)forallV-instance-method","name":"map","abstract":false,"args":[{"name":"workers","default_value":"1","external_name":"workers","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(workers = 1, buffer_size = 0, name = nil, &block : T -> V) : Channel(V) forall V","args_html":"(workers = <span class=\"n\">1</span>, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : T -> V) : <a href=\"Channel.html\">Channel</a>(V) forall V","location":{"filename":"src/concur.cr","line_number":95,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L95"},"def":{"name":"map","args":[{"name":"workers","default_value":"1","external_name":"workers","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> V)"},"return_type":"Channel(V)","visibility":"Public","body":"(Channel(V).new(buffer_size)).tap do |stream|\n  countdown = Channel(Nil).new(workers)\n  workers.times do |w_i|\n    spawn(name: name || \"#{Fiber.current.name} > #{w_i}\") do\n      begin\n        self.listen do |v|\n          stream.send(block.call(v))\n        end\n      ensure\n        countdown.send(nil)\n      end\n    end\n  end\n  spawn(name: name || \"#{Fiber.current.name} > countdown\") do\n    workers.times do\n      countdown.receive\n    end\n    countdown.close\n    stream.close\n  end\nend"}},{"html_id":"merge(channel:Channel(J),name=nil):Channel(T|J)forallJ-instance-method","name":"merge","doc":"Pipes values from two channels into a single one.\nNote. If both channels have values ready to be received, then one will be selected at random. ","summary":"<p>Pipes values from two channels into a single one.</p>","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"Channel(J)"},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(channel : Channel(J), name = nil) : Channel(T | J) forall J","args_html":"(channel : <a href=\"Channel.html\">Channel</a>(J), name = <span class=\"n\">nil</span>) : <a href=\"Channel.html\">Channel</a>(T | J) forall J","location":{"filename":"src/concur.cr","line_number":65,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L65"},"def":{"name":"merge","args":[{"name":"channel","external_name":"channel","restriction":"Channel(J)"},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"return_type":"Channel(T | J)","visibility":"Public","body":"channels = [self, channel]\nChannel(T | J).new.tap do |out_stream|\n  spawn do\n    loop do\n      begin\n        out_stream.send(Channel.receive_first(channels.shuffle))\n      rescue Channel::ClosedError\n        channels.reject!(&.closed?)\n        if channels.empty?\n          break\n        end\n      end\n    end\n    out_stream.close\n  end\nend\n"}},{"html_id":"partition(&predicate:T->Bool):Tuple(Channel(T),Channel(T))-instance-method","name":"partition","abstract":false,"location":{"filename":"src/concur.cr","line_number":182,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L182"},"def":{"name":"partition","yields":1,"block_arg":{"name":"predicate","external_name":"predicate","restriction":"(T -> Bool)"},"return_type":"::Tuple(Channel(T), Channel(T))","visibility":"Public","body":"{Channel(T).new, Channel(T).new}.tap do |pass, fail|\n  spawn do\n    self.listen do |v|\n      predicate.call(v) ? (      pass.send(v)) : (      fail.send(v))\n    end\n  end\nend"}},{"html_id":"rate_limit(items_per_sec:Float64,max_burst:Int32)-instance-method","name":"rate_limit","abstract":false,"args":[{"name":"items_per_sec","external_name":"items_per_sec","restriction":"Float64"},{"name":"max_burst","external_name":"max_burst","restriction":"Int32"}],"args_string":"(items_per_sec : Float64, max_burst : Int32)","args_html":"(items_per_sec : Float64, max_burst : Int32)","location":{"filename":"src/concur.cr","line_number":80,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L80"},"def":{"name":"rate_limit","args":[{"name":"items_per_sec","external_name":"items_per_sec","restriction":"Float64"},{"name":"max_burst","external_name":"max_burst","restriction":"Int32"}],"visibility":"Public","body":"rl = RateLimiter.new(rate: items_per_sec, max_burst: max_burst)\nChannel(T).new.tap do |stream|\n  spawn do\n    begin\n      loop do\n        rl.get\n        stream.send(self.receive)\n      end\n    rescue Channel::ClosedError\n      stream.close\n    end\n  end\nend\n"}},{"html_id":"reject(name=nil,&predicate:T->Bool):Channel(T)-instance-method","name":"reject","abstract":false,"args":[{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = nil, &predicate : T -> Bool) : Channel(T)","args_html":"(name = <span class=\"n\">nil</span>, &predicate : T -> Bool) : <a href=\"Channel.html\">Channel</a>(T)","location":{"filename":"src/concur.cr","line_number":176,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L176"},"def":{"name":"reject","args":[{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"yields":1,"block_arg":{"name":"predicate","external_name":"predicate","restriction":"(T -> Bool)"},"return_type":"Channel(T)","visibility":"Public","body":"self.select(name: name) do |v|\n  !(predicate.call(v))\nend"}},{"html_id":"scan(acc:U,buffer_size=0,name=nil,&block:U,T->U):Channel(U)forallU-instance-method","name":"scan","abstract":false,"args":[{"name":"acc","external_name":"acc","restriction":"U"},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(acc : U, buffer_size = 0, name = nil, &block : U, T -> U) : Channel(U) forall U","args_html":"(acc : U, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : U, T -> U) : <a href=\"Channel.html\">Channel</a>(U) forall U","location":{"filename":"src/concur.cr","line_number":123,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L123"},"def":{"name":"scan","args":[{"name":"acc","external_name":"acc","restriction":"U"},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"yields":2,"block_arg":{"name":"block","external_name":"block","restriction":"(U, T -> U)"},"return_type":"Channel(U)","visibility":"Public","body":"(Channel(U).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    self.listen do |v|\n      acc = block.call(acc, v)\n      stream.send(acc)\n    end\n    stream.close\n  end\nend"}},{"html_id":"select(name=nil,&predicate:T->Bool):Channel(T)-instance-method","name":"select","abstract":false,"args":[{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = nil, &predicate : T -> Bool) : Channel(T)","args_html":"(name = <span class=\"n\">nil</span>, &predicate : T -> Bool) : <a href=\"Channel.html\">Channel</a>(T)","location":{"filename":"src/concur.cr","line_number":163,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L163"},"def":{"name":"select","args":[{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"yields":1,"block_arg":{"name":"predicate","external_name":"predicate","restriction":"(T -> Bool)"},"return_type":"Channel(T)","visibility":"Public","body":"Channel(T).new.tap do |selected|\n  spawn(name: name) do\n    begin\n      loop do\n        v = self.receive\n        predicate.call(v) ? selected.send(v) : nil\n      end\n    rescue Channel::ClosedError\n      selected.close\n    end\n  end\nend"}},{"html_id":"zip(channel:Channel(U),name=nil,buffer_size=0,&block:T,U->V):Channel(V)forallU,V-instance-method","name":"zip","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"Channel(U)"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""}],"args_string":"(channel : Channel(U), name = nil, buffer_size = 0, &block : T, U -> V) : Channel(V) forall U, V","args_html":"(channel : <a href=\"Channel.html\">Channel</a>(U), name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, &block : T, U -> V) : <a href=\"Channel.html\">Channel</a>(V) forall U, V","location":{"filename":"src/concur.cr","line_number":135,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L135"},"def":{"name":"zip","args":[{"name":"channel","external_name":"channel","restriction":"Channel(U)"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""}],"yields":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T, U -> V)"},"return_type":"Channel(V)","visibility":"Public","body":"(Channel(V).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    begin\n      loop do\n        p1 = self.receive\n        p2 = channel.receive\n        stream.send(block.call(p1, p2))\n      end\n    rescue Channel::ClosedError\n      puts(\"#{Fiber.current.name} rescuing\")\n      stream.close\n    end\n  end\nend"}}]},{"html_id":"concur/Concur","path":"Concur.html","kind":"module","full_name":"Concur","name":"Concur","abstract":false,"locations":[{"filename":"src/concur.cr","line_number":3,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L3"},{"filename":"src/future.cr","line_number":1,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L1"}],"repository_name":"concur","program":false,"enum":false,"alias":false,"const":false,"instance_methods":[{"html_id":"every(t:Time::Span,name=nil,buffer_size=0,terminate=Channel(Time).new,&block:->T):Channel(T)forallT-instance-method","name":"every","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"Time::Span"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"terminate","default_value":"Channel(Time).new","external_name":"terminate","restriction":""}],"args_string":"(t : Time::Span, name = nil, buffer_size = 0, terminate = Channel(Time).new, &block :  -> T) : Channel(T) forall T","args_html":"(t : Time::Span, name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, terminate = <span class=\"t\">Channel</span>(<span class=\"t\">Time</span>).<span class=\"k\">new</span>, &block :  -> T) : <a href=\"Channel.html\">Channel</a>(T) forall T","location":{"filename":"src/concur.cr","line_number":27,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L27"},"def":{"name":"every","args":[{"name":"t","external_name":"t","restriction":"Time::Span"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""},{"name":"terminate","default_value":"Channel(Time).new","external_name":"terminate","restriction":""}],"yields":0,"block_arg":{"name":"block","external_name":"block","restriction":"(-> T)"},"return_type":"Channel(T)","visibility":"Public","body":"(Channel(T).new(buffer_size)).tap do |values|\n  spawn(name: name) do\n    begin\n      loop do\n        begin\n          select\nwhen timeout(t)\n            values.send(block.call)\nwhen time = terminate.receive\n            break\nend\n\n        rescue Channel::ClosedError\n          break\n        end\n      end\n    ensure\n      values.close\n    end\n  end\nend"}},{"html_id":"flatten(in_stream:Channel(Enumerable(K)),name=nil):Channel(K)forallK-instance-method","name":"flatten","abstract":false,"args":[{"name":"in_stream","external_name":"in_stream","restriction":"Channel(Enumerable(K))"},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"args_string":"(in_stream : Channel(Enumerable(K)), name = nil) : Channel(K) forall K","args_html":"(in_stream : <a href=\"Channel.html\">Channel</a>(Enumerable(K)), name = <span class=\"n\">nil</span>) : <a href=\"Channel.html\">Channel</a>(K) forall K","location":{"filename":"src/concur.cr","line_number":46,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L46"},"def":{"name":"flatten","args":[{"name":"in_stream","external_name":"in_stream","restriction":"Channel(Enumerable(K))"},{"name":"name","default_value":"nil","external_name":"name","restriction":""}],"return_type":"Channel(K)","visibility":"Public","body":"Channel(K).new.tap do |out_stream|\n  spawn do\n    begin\n      loop do\n        in_stream.receive.each do |v|\n          out_stream.send(v)\n        end\n      end\n    rescue Channel::ClosedError\n      out_stream.close\n    end\n  end\nend"}},{"html_id":"source(input:Enumerable(T),name=nil,buffer_size=0):Channel(T)forallT-instance-method","name":"source","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"Enumerable(T)"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""}],"args_string":"(input : Enumerable(T), name = nil, buffer_size = 0) : Channel(T) forall T","args_html":"(input : Enumerable(T), name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>) : <a href=\"Channel.html\">Channel</a>(T) forall T","location":{"filename":"src/concur.cr","line_number":4,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L4"},"def":{"name":"source","args":[{"name":"input","external_name":"input","restriction":"Enumerable(T)"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""}],"return_type":"Channel(T)","visibility":"Public","body":"(Channel(T).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    input.each do |value|\n      stream.send(value)\n    end\n    stream.close\n  end\nend"}},{"html_id":"source(initial_state:S,name=nil,buffer_size=0,&block:S->Tuple(S,V))forallS,V-instance-method","name":"source","abstract":false,"args":[{"name":"initial_state","external_name":"initial_state","restriction":"S"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""}],"args_string":"(initial_state : S, name = nil, buffer_size = 0, &block : S -> Tuple(S, V)) forall S, V","args_html":"(initial_state : S, name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, &block : S -> Tuple(S, V)) forall S, V","location":{"filename":"src/concur.cr","line_number":15,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/concur.cr#L15"},"def":{"name":"source","args":[{"name":"initial_state","external_name":"initial_state","restriction":"S"},{"name":"name","default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","default_value":"0","external_name":"buffer_size","restriction":""}],"yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(S -> ::Tuple(S, V))"},"visibility":"Public","body":"(Channel(V).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    state = initial_state\n    loop do\n      state, value = block.call(state)\n      stream.send(value)\n    end\n  end\nend"}}],"types":[{"html_id":"concur/Concur/EmptyError","path":"Concur/EmptyError.html","kind":"class","full_name":"Concur::EmptyError","name":"EmptyError","abstract":false,"superclass":{"html_id":"concur/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"concur/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concur/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/future.cr","line_number":2,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L2"}],"repository_name":"concur","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"concur/Concur","kind":"module","full_name":"Concur","name":"Concur"}},{"html_id":"concur/Concur/Future","path":"Concur/Future.html","kind":"class","full_name":"Concur::Future(T)","name":"Future","abstract":false,"superclass":{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concur/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/future.cr","line_number":10,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L10"}],"repository_name":"concur","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"concur/Concur","kind":"module","full_name":"Concur","name":"Concur"},"doc":"A Future represents a value which may or may not *currently* be available, but will be\navailable at some point, or an exception if that value could not be made available.","summary":"<p>A Future represents a value which may or may not <em>currently</em> be available, but will be available at some point, or an exception if that value could not be made available.</p>","constructors":[{"html_id":"new(&block:->T)-class-method","name":"new","abstract":false,"location":{"filename":"src/future.cr","line_number":14,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L14"},"def":{"name":"new","yields":0,"block_arg":{"name":"block","external_name":"block","restriction":"(-> T)"},"visibility":"Public","body":"_ = Future(T).allocate\n_.initialize(&block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"await(t:Time::Span):T|Exception-instance-method","name":"await","doc":"Same as `#await`, but returns a `Timeout` exception if the given `t` expires.","summary":"<p>Same as <code><a href=\"../Concur/Future.html#await%3AT%7CException-instance-method\">#await</a></code>, but returns a <code><a href=\"../Concur/Timeout.html\">Timeout</a></code> exception if the given <code>t</code> expires.</p>","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"Time::Span"}],"args_string":"(t : Time::Span) : T | Exception","args_html":"(t : Time::Span) : T | Exception","location":{"filename":"src/future.cr","line_number":53,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L53"},"def":{"name":"await","args":[{"name":"t","external_name":"t","restriction":"Time::Span"}],"return_type":"T | Exception","visibility":"Public","body":"if done?\nelse\n  select\nwhen timeout(t)\n    return Timeout.new\nwhen res = @value_ch.receive?\n    if res\n      @value = res\n    end\nwhen err = @error_ch.receive?\n    if err\n      @error = err\n    end\nend\n\n  @value_ch.close\n  @error_ch.close\nend\n@error ? @error.not_nil! : @value.not_nil!\n"}},{"html_id":"await:T|Exception-instance-method","name":"await","doc":"Awaits the completion of the future and returns either a value or an exception.","summary":"<p>Awaits the completion of the future and returns either a value or an exception.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":27,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L27"},"def":{"name":"await","return_type":"T | Exception","visibility":"Public","body":"if done?\nelse\n  select\nwhen res = @value_ch.receive?\n    if res\n      @value = res\n    end\nwhen err = @error_ch.receive?\n    if err\n      @error = err\n    end\nend\n\n  @value_ch.close\n  @error_ch.close\nend\n@error ? @error.not_nil! : @value.not_nil!\n"}},{"html_id":"await!(t:Time::Span):T-instance-method","name":"await!","doc":"Same as `#await!`, but raises a `Timeout` exception if the given `t` expires.","summary":"<p>Same as <code><a href=\"../Concur/Future.html#await%21%3AT-instance-method\">#await!</a></code>, but raises a <code><a href=\"../Concur/Timeout.html\">Timeout</a></code> exception if the given <code>t</code> expires.</p>","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"Time::Span"}],"args_string":"(t : Time::Span) : T","args_html":"(t : Time::Span) : T","location":{"filename":"src/future.cr","line_number":70,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L70"},"def":{"name":"await!","args":[{"name":"t","external_name":"t","restriction":"Time::Span"}],"return_type":"T","visibility":"Public","body":"case res = await(t)\nwhen T\n  res\nelse\n  raise(res)\nend"}},{"html_id":"await!:T-instance-method","name":"await!","doc":"Awaits the completion of the future and either returns the computed value\nor raises an exception.","summary":"<p>Awaits the completion of the future and either returns the computed value or raises an exception.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":43,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L43"},"def":{"name":"await!","return_type":"T","visibility":"Public","body":"case res = await\nwhen T\n  res\nelse\n  raise(res)\nend"}},{"html_id":"done?-instance-method","name":"done?","doc":"Returns `true` if the future has completed - either with a value or an exception.\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if the future has completed - either with a value or an exception.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":81,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L81"},"def":{"name":"done?","visibility":"Public","body":"@value_ch.closed?"}},{"html_id":"flat_map(&block:T->Future(K)):Future(K)forallK-instance-method","name":"flat_map","doc":"Creates a new future by applying a function to the successful result of this future,\nand returns the result of the function as the new future.\n\nIf this future is completed with an exception then the new future will also contain this exception.","summary":"<p>Creates a new future by applying a function to the successful result of this future, and returns the result of the function as the new future.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":89,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L89"},"def":{"name":"flat_map","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> Future(K))"},"return_type":"Future(K)","visibility":"Public","body":"map do |value|\n  (block.call(value)).await!\nend"}},{"html_id":"flatten-instance-method","name":"flatten","doc":"Creates a new future with one level of nesting flattened.","summary":"<p>Creates a new future with one level of nesting flattened.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":96,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L96"},"def":{"name":"flatten","visibility":"Public","body":"flat_map do |fut|\n  fut\nend"}},{"html_id":"map(&block:T->K):Future(K)forallK-instance-method","name":"map","doc":"Creates a new future by applying a function to the successful result of this future.\n\nIf this future is completed with an exception then the new future will also contain this exception.","summary":"<p>Creates a new future by applying a function to the successful result of this future.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":103,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L103"},"def":{"name":"map","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> K)"},"return_type":"Future(K)","visibility":"Public","body":"transform do |res|\n  case res\n  when T\n    block.call(res)\n  else\n    raise(res)\n  end\nend"}},{"html_id":"map_to(typ:Object.class)-instance-method","name":"map_to","doc":"Creates a new Future which is completed with this Future's result if\nthat conforms to type `typ` or a `TypeCastError` otherwise.","summary":"<p>Creates a new Future which is completed with this Future's result if that conforms to type <code>typ</code> or a <code>TypeCastError</code> otherwise.</p>","abstract":false,"args":[{"name":"typ","external_name":"typ","restriction":"Object.class"}],"args_string":"(typ : Object.class)","args_html":"(typ : <span class=\"t\">Object</span>.<span class=\"k\">class</span>)","location":{"filename":"src/future.cr","line_number":116,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L116"},"def":{"name":"map_to","args":[{"name":"typ","external_name":"typ","restriction":"Object.class"}],"visibility":"Public","body":"map do |value|\n  typ.cast(value)\nend"}},{"html_id":"on_complete(&block:T|Exception->_):Future(T)-instance-method","name":"on_complete","doc":"Applies the side-effecting function to the result of this future, and returns a new future\nwith the result of this future.\n\nThis method allows one to enforce that the callbacks are executed in a specified order.\nNote: if one of the chained `on_complete` callbacks throws an exception, that exception is not\npropagated to the subsequent `on_complete` callbacks. Instead, the subsequent `on_complete` callbacks\nare given the original value of this future.","summary":"<p>Applies the side-effecting function to the result of this future, and returns a new future with the result of this future.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":127,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L127"},"def":{"name":"on_complete","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T | Exception -> _)"},"return_type":"Future(T)","visibility":"Public","body":"transform do |res|\n  begin\n    block.call(res)\n  rescue\n  end\n  case res\n  when T\n    res\n  else\n    raise(res)\n  end\nend"}},{"html_id":"on_error(&block:Exception->_):Future(T)-instance-method","name":"on_error","doc":"Applies the side-effecting function to the result of this future if it raised an error, and\nreturns a new future with the result of this future.\n\nWARNING: Will not be called if this future is never completed or if it is completed with success.","summary":"<p>Applies the side-effecting function to the result of this future if it raised an error, and returns a new future with the result of this future.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":158,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L158"},"def":{"name":"on_error","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Exception -> _)"},"return_type":"Future(T)","visibility":"Public","body":"on_complete do |res|\n  case res\n  when Exception\n    block.call(res)\n  end\nend"}},{"html_id":"on_success(&block:T->_):Future(T)-instance-method","name":"on_success","doc":"Applies the side-effecting function to the result of this future if it was successful, and\nreturns a new future with the result of this future.\n\nWARNING: Will not be called if this future is never completed or if it is completed with an error.","summary":"<p>Applies the side-effecting function to the result of this future if it was successful, and returns a new future with the result of this future.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":145,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L145"},"def":{"name":"on_success","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"return_type":"Future(T)","visibility":"Public","body":"on_complete do |res|\n  case res\n  when T\n    block.call(res)\n  end\nend"}},{"html_id":"recover(&block:Exception->T):Future(T)-instance-method","name":"recover","doc":"Creates a new future that will handle any matching throwable that this future might contain.\nIf there is no match, or if this future contains a valid result then the new future will contain the same.","summary":"<p>Creates a new future that will handle any matching throwable that this future might contain.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":169,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L169"},"def":{"name":"recover","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Exception -> T)"},"return_type":"Future(T)","visibility":"Public","body":"transform do |res|\n  case res\n  when T\n    res\n  else\n    block.call(res)\n  end\nend"}},{"html_id":"select(&block:T->Bool):Future(T)-instance-method","name":"select","doc":"Creates a new future by filtering the value of the current future with a predicate.\n\nIf the current future contains a value which satisfies the predicate, the new future will also hold that value.\nOtherwise, the resulting future will fail with a `EmptyError`.\nIf the current future fails, then the resulting future also fails.","summary":"<p>Creates a new future by filtering the value of the current future with a predicate.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":185,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L185"},"def":{"name":"select","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> Bool)"},"return_type":"Future(T)","visibility":"Public","body":"map do |value|\n  if block.call(value)\n    value\n  else\n    raise(EmptyError.new)\n  end\nend"}},{"html_id":"transform(&block:T|Exception->K):Future(K)forallK-instance-method","name":"transform","doc":"Creates a new Future by applying the specified function to the result of this Future.\n\nIf there is any non-fatal exception thrown when 'block' is applied then that exception\nwill be propagated to the resulting future.","summary":"<p>Creates a new Future by applying the specified function to the result of this Future.</p>","abstract":false,"location":{"filename":"src/future.cr","line_number":199,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L199"},"def":{"name":"transform","yields":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T | Exception -> K)"},"return_type":"Future(K)","visibility":"Public","body":"Future.new do\n  block.call(self.await)\nend"}},{"html_id":"zip(other:Future(K),&block:T,K->W):Future(W)forallK,W-instance-method","name":"zip","doc":"Creates a new future holding the result of `block` applied to the tuple of values from two futures.","summary":"<p>Creates a new future holding the result of <code>block</code> applied to the tuple of values from two futures.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Future(K)"}],"args_string":"(other : Future(K), &block : T, K -> W) : Future(W) forall K, W","args_html":"(other : <a href=\"../Concur/Future.html\">Future</a>(K), &block : T, K -> W) : <a href=\"../Concur/Future.html\">Future</a>(W) forall K, W","location":{"filename":"src/future.cr","line_number":206,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L206"},"def":{"name":"zip","args":[{"name":"other","external_name":"other","restriction":"Future(K)"}],"yields":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T, K -> W)"},"return_type":"Future(W)","visibility":"Public","body":"flat_map do |t|\n  other.map do |k|\n    block.call(t, k)\n  end\nend"}}]},{"html_id":"concur/Concur/Timeout","path":"Concur/Timeout.html","kind":"class","full_name":"Concur::Timeout","name":"Timeout","abstract":false,"superclass":{"html_id":"concur/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"concur/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concur/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/future.cr","line_number":5,"url":"https://github.com/lbarasti/concur/blob/9f4dd6f783fe753b5ca3ddbac09a4da686613a69/src/future.cr#L5"}],"repository_name":"concur","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"concur/Concur","kind":"module","full_name":"Concur","name":"Concur"}}]}]}}