{"repository_name":"concur","body":"![GitHub release](https://img.shields.io/github/release/lbarasti/concur.svg)\n![Build Status](https://github.com/lbarasti/concur/workflows/spec_and_docs/badge.svg)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://lbarasti.github.io/concur)\n\n# concur\n\nA collection of primitives for event-driven programming.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     concur:\n       github: your-github-user/concur\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"concur\"\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/concur/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [lorenzo.barasti](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"concur/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"concur","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"concur/Channel","path":"Channel.html","kind":"class","full_name":"Channel(T)","name":"Channel","abstract":false,"superclass":{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concur/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concur/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concur.cr","line_number":61,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L61"}],"repository_name":"concur","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Channel` enables concurrent communication between fibers.\n\nThey allow communicating data between fibers without sharing memory and without having to worry about locks, semaphores or other special structures.\n\n```\nchannel = Channel(Int32).new\n\nspawn do\n  channel.send(0)\n  channel.send(1)\nend\n\nchannel.receive # => 0\nchannel.receive # => 1\n```\n\nNOTE: Although a `Channel(Nil)` or any other nilable types like `Channel(Int32?)` are valid\nthey are discouraged since from certain methods or constructs it receiving a `nil` as data\nwill be indistinguishable from a closed channel.\n","summary":"<p>A <code><a href=\"Channel.html\">Channel</a></code> enables concurrent communication between fibers.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"batch(size:Int32,interval:Time::Span,name=nil):Channel(Enumerable(T))-instance-method","html_id":"batch(size:Int32,interval:Time::Span,name=nil):Channel(Enumerable(T))-instance-method","name":"batch","doc":"Sends batches of messages either every `size` messages received or every `interval`,\nif a batch has not been sent within the last `interval`.","summary":"<p>Sends batches of messages either every <code>size</code> messages received or every <code>interval</code>, if a batch has not been sent within the last <code>interval</code>.</p>","abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"},{"name":"interval","doc":null,"default_value":"","external_name":"interval","restriction":"Time::Span"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(size : Int32, interval : Time::Span, name = <span class=\"n\">nil</span>) : Channel(Enumerable(T))","args_html":"(size : Int32, interval : Time::Span, name = <span class=\"n\">nil</span>) : <a href=\"Channel.html\">Channel</a>(Enumerable(T))","location":{"filename":"src/concur.cr","line_number":194,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L194"},"def":{"name":"batch","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"},{"name":"interval","doc":null,"default_value":"","external_name":"interval","restriction":"Time::Span"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Channel(Enumerable(T))","visibility":"Public","body":"Channel(Enumerable(T)).new.tap do |out_stream|\n  memory = Array(T).new(size)\n  tick = every(interval) do\n    nil\n  end\n  sent = false\n  spawn(name: name) do\n    begin\n      loop do\n        select\nwhen v = self.receive\n          memory << v\n          if memory.size >= size\n            out_stream.send(memory.dup)\n            memory.clear\n            sent = true\n          end\nwhen tick.receive\n          if sent\n          else\n            out_stream.send(memory.dup)\n            memory.clear\n          end\n          sent = false\nend\n\n      end\n    rescue Channel::ClosedError\n      out_stream.send(memory.dup)\n      out_stream.close\n    end\n  end\nend"}},{"id":"broadcast(out_ports=2,name=nil)-instance-method","html_id":"broadcast(out_ports=2,name=nil)-instance-method","name":"broadcast","doc":"TODO define a macro to return a Tuple","summary":"<p><span class=\"flag orange\">TODO</span>  define a macro to return a Tuple</p>","abstract":false,"args":[{"name":"out_ports","doc":null,"default_value":"2","external_name":"out_ports","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(out_ports = <span class=\"n\">2</span>, name = <span class=\"n\">nil</span>)","args_html":"(out_ports = <span class=\"n\">2</span>, name = <span class=\"n\">nil</span>)","location":{"filename":"src/concur.cr","line_number":152,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L152"},"def":{"name":"broadcast","args":[{"name":"out_ports","doc":null,"default_value":"2","external_name":"out_ports","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"out_ports.times.map do\n  Channel(T).new\nend.to_a.tap do |streams|\n  spawn(name: name) do\n    self.listen do |v|\n      streams.each(&.send(v))\n    end\n    streams.each(&.close())\n  end\nend"}},{"id":"each(name=nil,&block:T->)-instance-method","html_id":"each(name=nil,&block:T->)-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &block : T -> )","args_html":"(name = <span class=\"n\">nil</span>, &block : T -> )","location":{"filename":"src/concur.cr","line_number":234,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L234"},"def":{"name":"each","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> )"},"return_type":"","visibility":"Public","body":"spawn(name: name) do\n  loop do\n    begin\n      block.call(self.receive)\n    rescue Channel::ClosedError\n      break\n    end\n  end\nend"}},{"id":"listen(&block:T->)-instance-method","html_id":"listen(&block:T->)-instance-method","name":"listen","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : T -> )","args_html":"(&block : T -> )","location":{"filename":"src/concur.cr","line_number":225,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L225"},"def":{"name":"listen","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> )"},"return_type":"","visibility":"Public","body":"loop do\n  begin\n    block.call(self.receive)\n  rescue Channel::ClosedError\n    puts(\"#{Fiber.current.name} rescuing\")\n    break\n  end\nend"}},{"id":"map(initial_state:S,buffer_size=0,name=nil,&block:S,T->V)forallS,V-instance-method","html_id":"map(initial_state:S,buffer_size=0,name=nil,&block:S,T->V)forallS,V-instance-method","name":"map","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial_state","doc":null,"default_value":"","external_name":"initial_state","restriction":"S"},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(initial_state : S, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : S, T -> V) forall S, V","args_html":"(initial_state : S, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : S, T -> V) forall S, V","location":{"filename":"src/concur.cr","line_number":115,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L115"},"def":{"name":"map","args":[{"name":"initial_state","doc":null,"default_value":"","external_name":"initial_state","restriction":"S"},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(S, T -> V)"},"return_type":"","visibility":"Public","body":"state = initial_state\nself.map(name: name, buffer_size: buffer_size) do |t|\n  state, v = block.call(state, t)\n  v\nend\n"}},{"id":"map(workers=1,buffer_size=0,name=nil,&block:T->V):Channel(V)forallV-instance-method","html_id":"map(workers=1,buffer_size=0,name=nil,&block:T->V):Channel(V)forallV-instance-method","name":"map","doc":null,"summary":null,"abstract":false,"args":[{"name":"workers","doc":null,"default_value":"1","external_name":"workers","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(workers = <span class=\"n\">1</span>, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : T -> V) : Channel(V) forall V","args_html":"(workers = <span class=\"n\">1</span>, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : T -> V) : <a href=\"Channel.html\">Channel</a>(V) forall V","location":{"filename":"src/concur.cr","line_number":95,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L95"},"def":{"name":"map","args":[{"name":"workers","doc":null,"default_value":"1","external_name":"workers","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> V)"},"return_type":"Channel(V)","visibility":"Public","body":"(Channel(V).new(buffer_size)).tap do |stream|\n  countdown = Channel(Nil).new(workers)\n  workers.times do |w_i|\n    spawn(name: name || \"#{Fiber.current.name} > #{w_i}\") do\n      begin\n        self.listen do |v|\n          stream.send(block.call(v))\n        end\n      ensure\n        countdown.send(nil)\n      end\n    end\n  end\n  spawn(name: name || \"#{Fiber.current.name} > countdown\") do\n    workers.times do\n      countdown.receive\n    end\n    countdown.close\n    stream.close\n  end\nend"}},{"id":"merge(channel:Channel(J),name=nil):Channel(T|J)forallJ-instance-method","html_id":"merge(channel:Channel(J),name=nil):Channel(T|J)forallJ-instance-method","name":"merge","doc":"Pipes values from two channels into a single one.\nNote. If both channels have values ready to be received, then one will be selected at random. ","summary":"<p>Pipes values from two channels into a single one.</p>","abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel(J)"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(channel : Channel(J), name = <span class=\"n\">nil</span>) : Channel(T | J) forall J","args_html":"(channel : <a href=\"Channel.html\">Channel</a>(J), name = <span class=\"n\">nil</span>) : <a href=\"Channel.html\">Channel</a>(T | J) forall J","location":{"filename":"src/concur.cr","line_number":65,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L65"},"def":{"name":"merge","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel(J)"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Channel(T | J)","visibility":"Public","body":"channels = [self, channel]\nChannel(T | J).new.tap do |out_stream|\n  spawn do\n    loop do\n      begin\n        out_stream.send(Channel.receive_first(channels.shuffle))\n      rescue Channel::ClosedError\n        channels.reject!(&.closed?)\n        if channels.empty?\n          break\n        end\n      end\n    end\n    out_stream.close\n  end\nend\n"}},{"id":"partition(&predicate:T->Bool):Tuple(Channel(T),Channel(T))-instance-method","html_id":"partition(&predicate:T->Bool):Tuple(Channel(T),Channel(T))-instance-method","name":"partition","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&predicate : T -> Bool) : Tuple(Channel(T), Channel(T))","args_html":"(&predicate : T -> Bool) : Tuple(<a href=\"Channel.html\">Channel</a>(T), <a href=\"Channel.html\">Channel</a>(T))","location":{"filename":"src/concur.cr","line_number":182,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L182"},"def":{"name":"partition","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"predicate","doc":null,"default_value":"","external_name":"predicate","restriction":"(T -> Bool)"},"return_type":"::Tuple(Channel(T), Channel(T))","visibility":"Public","body":"{Channel(T).new, Channel(T).new}.tap do |pass, fail|\n  spawn do\n    self.listen do |v|\n      predicate.call(v) ? (      pass.send(v)) : (      fail.send(v))\n    end\n  end\nend"}},{"id":"rate_limit(items_per_sec:Float64,max_burst:Int32)-instance-method","html_id":"rate_limit(items_per_sec:Float64,max_burst:Int32)-instance-method","name":"rate_limit","doc":null,"summary":null,"abstract":false,"args":[{"name":"items_per_sec","doc":null,"default_value":"","external_name":"items_per_sec","restriction":"Float64"},{"name":"max_burst","doc":null,"default_value":"","external_name":"max_burst","restriction":"Int32"}],"args_string":"(items_per_sec : Float64, max_burst : Int32)","args_html":"(items_per_sec : Float64, max_burst : Int32)","location":{"filename":"src/concur.cr","line_number":80,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L80"},"def":{"name":"rate_limit","args":[{"name":"items_per_sec","doc":null,"default_value":"","external_name":"items_per_sec","restriction":"Float64"},{"name":"max_burst","doc":null,"default_value":"","external_name":"max_burst","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"rl = RateLimiter.new(rate: items_per_sec, max_burst: max_burst)\nChannel(T).new.tap do |stream|\n  spawn do\n    begin\n      loop do\n        rl.get\n        stream.send(self.receive)\n      end\n    rescue Channel::ClosedError\n      stream.close\n    end\n  end\nend\n"}},{"id":"reject(name=nil,&predicate:T->Bool):Channel(T)-instance-method","html_id":"reject(name=nil,&predicate:T->Bool):Channel(T)-instance-method","name":"reject","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &predicate : T -> Bool) : Channel(T)","args_html":"(name = <span class=\"n\">nil</span>, &predicate : T -> Bool) : <a href=\"Channel.html\">Channel</a>(T)","location":{"filename":"src/concur.cr","line_number":176,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L176"},"def":{"name":"reject","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"predicate","doc":null,"default_value":"","external_name":"predicate","restriction":"(T -> Bool)"},"return_type":"Channel(T)","visibility":"Public","body":"self.select(name: name) do |v|\n  !(predicate.call(v))\nend"}},{"id":"scan(acc:U,buffer_size=0,name=nil,&block:U,T->U):Channel(U)forallU-instance-method","html_id":"scan(acc:U,buffer_size=0,name=nil,&block:U,T->U):Channel(U)forallU-instance-method","name":"scan","doc":null,"summary":null,"abstract":false,"args":[{"name":"acc","doc":null,"default_value":"","external_name":"acc","restriction":"U"},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(acc : U, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : U, T -> U) : Channel(U) forall U","args_html":"(acc : U, buffer_size = <span class=\"n\">0</span>, name = <span class=\"n\">nil</span>, &block : U, T -> U) : <a href=\"Channel.html\">Channel</a>(U) forall U","location":{"filename":"src/concur.cr","line_number":123,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L123"},"def":{"name":"scan","args":[{"name":"acc","doc":null,"default_value":"","external_name":"acc","restriction":"U"},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(U, T -> U)"},"return_type":"Channel(U)","visibility":"Public","body":"(Channel(U).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    self.listen do |v|\n      acc = block.call(acc, v)\n      stream.send(acc)\n    end\n    stream.close\n  end\nend"}},{"id":"select(name=nil,&predicate:T->Bool):Channel(T)-instance-method","html_id":"select(name=nil,&predicate:T->Bool):Channel(T)-instance-method","name":"select","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(name = <span class=\"n\">nil</span>, &predicate : T -> Bool) : Channel(T)","args_html":"(name = <span class=\"n\">nil</span>, &predicate : T -> Bool) : <a href=\"Channel.html\">Channel</a>(T)","location":{"filename":"src/concur.cr","line_number":163,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L163"},"def":{"name":"select","args":[{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"predicate","doc":null,"default_value":"","external_name":"predicate","restriction":"(T -> Bool)"},"return_type":"Channel(T)","visibility":"Public","body":"Channel(T).new.tap do |selected|\n  spawn(name: name) do\n    begin\n      loop do\n        v = self.receive\n        predicate.call(v) ? selected.send(v) : nil\n      end\n    rescue Channel::ClosedError\n      selected.close\n    end\n  end\nend"}},{"id":"zip(channel:Channel(U),name=nil,buffer_size=0,&block:T,U->V):Channel(V)forallU,V-instance-method","html_id":"zip(channel:Channel(U),name=nil,buffer_size=0,&block:T,U->V):Channel(V)forallU,V-instance-method","name":"zip","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel(U)"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""}],"args_string":"(channel : Channel(U), name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, &block : T, U -> V) : Channel(V) forall U, V","args_html":"(channel : <a href=\"Channel.html\">Channel</a>(U), name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, &block : T, U -> V) : <a href=\"Channel.html\">Channel</a>(V) forall U, V","location":{"filename":"src/concur.cr","line_number":135,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L135"},"def":{"name":"zip","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel(U)"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T, U -> V)"},"return_type":"Channel(V)","visibility":"Public","body":"(Channel(V).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    begin\n      loop do\n        p1 = self.receive\n        p2 = channel.receive\n        stream.send(block.call(p1, p2))\n      end\n    rescue Channel::ClosedError\n      puts(\"#{Fiber.current.name} rescuing\")\n      stream.close\n    end\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"concur/Concur","path":"Concur.html","kind":"module","full_name":"Concur","name":"Concur","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/concur.cr","line_number":3,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L3"}],"repository_name":"concur","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"every(t:Time::Span,name=nil,buffer_size=0,terminate=Channel(Time).new,&block:->T):Channel(T)forallT-instance-method","html_id":"every(t:Time::Span,name=nil,buffer_size=0,terminate=Channel(Time).new,&block:->T):Channel(T)forallT-instance-method","name":"every","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Time::Span"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"terminate","doc":null,"default_value":"Channel(Time).new","external_name":"terminate","restriction":""}],"args_string":"(t : Time::Span, name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, terminate = <span class=\"t\">Channel</span>(<span class=\"t\">Time</span>).<span class=\"k\">new</span>, &block :  -> T) : Channel(T) forall T","args_html":"(t : Time::Span, name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, terminate = <span class=\"t\">Channel</span>(<span class=\"t\">Time</span>).<span class=\"k\">new</span>, &block :  -> T) : <a href=\"Channel.html\">Channel</a>(T) forall T","location":{"filename":"src/concur.cr","line_number":27,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L27"},"def":{"name":"every","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Time::Span"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""},{"name":"terminate","doc":null,"default_value":"Channel(Time).new","external_name":"terminate","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> T)"},"return_type":"Channel(T)","visibility":"Public","body":"(Channel(T).new(buffer_size)).tap do |values|\n  spawn(name: name) do\n    begin\n      loop do\n        begin\n          select\nwhen timeout(t)\n            values.send(block.call)\nwhen time = terminate.receive\n            break\nend\n\n        rescue Channel::ClosedError\n          break\n        end\n      end\n    ensure\n      values.close\n    end\n  end\nend"}},{"id":"flatten(in_stream:Channel(Enumerable(K)),name=nil):Channel(K)forallK-instance-method","html_id":"flatten(in_stream:Channel(Enumerable(K)),name=nil):Channel(K)forallK-instance-method","name":"flatten","doc":null,"summary":null,"abstract":false,"args":[{"name":"in_stream","doc":null,"default_value":"","external_name":"in_stream","restriction":"Channel(Enumerable(K))"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(in_stream : Channel(Enumerable(K)), name = <span class=\"n\">nil</span>) : Channel(K) forall K","args_html":"(in_stream : <a href=\"Channel.html\">Channel</a>(Enumerable(K)), name = <span class=\"n\">nil</span>) : <a href=\"Channel.html\">Channel</a>(K) forall K","location":{"filename":"src/concur.cr","line_number":46,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L46"},"def":{"name":"flatten","args":[{"name":"in_stream","doc":null,"default_value":"","external_name":"in_stream","restriction":"Channel(Enumerable(K))"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Channel(K)","visibility":"Public","body":"Channel(K).new.tap do |out_stream|\n  spawn do\n    begin\n      loop do\n        in_stream.receive.each do |v|\n          out_stream.send(v)\n        end\n      end\n    rescue Channel::ClosedError\n      out_stream.close\n    end\n  end\nend"}},{"id":"source(input:Enumerable(T),name=nil,buffer_size=0):Channel(T)forallT-instance-method","html_id":"source(input:Enumerable(T),name=nil,buffer_size=0):Channel(T)forallT-instance-method","name":"source","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"Enumerable(T)"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""}],"args_string":"(input : Enumerable(T), name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>) : Channel(T) forall T","args_html":"(input : Enumerable(T), name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>) : <a href=\"Channel.html\">Channel</a>(T) forall T","location":{"filename":"src/concur.cr","line_number":4,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L4"},"def":{"name":"source","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"Enumerable(T)"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Channel(T)","visibility":"Public","body":"(Channel(T).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    input.each do |value|\n      stream.send(value)\n    end\n    stream.close\n  end\nend"}},{"id":"source(initial_state:S,name=nil,buffer_size=0,&block:S->Tuple(S,V))forallS,V-instance-method","html_id":"source(initial_state:S,name=nil,buffer_size=0,&block:S->Tuple(S,V))forallS,V-instance-method","name":"source","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial_state","doc":null,"default_value":"","external_name":"initial_state","restriction":"S"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""}],"args_string":"(initial_state : S, name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, &block : S -> Tuple(S, V)) forall S, V","args_html":"(initial_state : S, name = <span class=\"n\">nil</span>, buffer_size = <span class=\"n\">0</span>, &block : S -> Tuple(S, V)) forall S, V","location":{"filename":"src/concur.cr","line_number":15,"url":"https://github.com/lbarasti/concur/blob/129bf3c12ebedaff2390d29f7004167d34c981de/src/concur.cr#L15"},"def":{"name":"source","args":[{"name":"initial_state","doc":null,"default_value":"","external_name":"initial_state","restriction":"S"},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""},{"name":"buffer_size","doc":null,"default_value":"0","external_name":"buffer_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(S -> ::Tuple(S, V))"},"return_type":"","visibility":"Public","body":"(Channel(V).new(buffer_size)).tap do |stream|\n  spawn(name: name) do\n    state = initial_state\n    loop do\n      state, value = block.call(state)\n      stream.send(value)\n    end\n  end\nend"}}],"macros":[],"types":[]}]}}